version: '3.8'

services:
  # Realm 1, Cluster 1 nodes
  othernet-1-1-bootstrap:
    build: 
      context: .
      dockerfile: Dockerfile.othernet
    container_name: othernet_1_1_bootstrap
    hostname: bootstrap
    environment:
      - OTHERNET_REALM=1
      - OTHERNET_CLUSTER=1
      - OTHERNET_NODE_ID=1000
      - OTHERNET_CAPABILITIES=7  # HOLDING | ROUTING | GATEWAY
    networks:
      othernet:
        ipv4_address: 172.30.1.10
    ports:
      - "8090:8080"
    stdin_open: true
    tty: true
    volumes:
      - ./logs:/app/logs

  othernet-1-1-node2:
    build: 
      context: .
      dockerfile: Dockerfile.othernet
    container_name: othernet_1_1_node2
    hostname: node2-r1c1
    environment:
      - OTHERNET_REALM=1
      - OTHERNET_CLUSTER=1
      - OTHERNET_NODE_ID=1001
      - OTHERNET_CAPABILITIES=3  # HOLDING | ROUTING
    networks:
      othernet:
        ipv4_address: 172.30.1.11
    ports:
      - "8091:8080"
    stdin_open: true
    tty: true
    command: ["./othernet_node", "172.30.1.10", "8080"]
    depends_on:
      - othernet-1-1-bootstrap
    volumes:
      - ./logs:/app/logs

  othernet-1-1-node3:
    build: 
      context: .
      dockerfile: Dockerfile.othernet
    container_name: othernet_1_1_node3
    hostname: node3-r1c1
    environment:
      - OTHERNET_REALM=1
      - OTHERNET_CLUSTER=1
      - OTHERNET_NODE_ID=1002
      - OTHERNET_CAPABILITIES=1  # HOLDING only
    networks:
      othernet:
        ipv4_address: 172.30.1.12
    ports:
      - "8092:8080"
    stdin_open: true
    tty: true
    command: ["./othernet_node", "172.30.1.10", "8080"]
    depends_on:
      - othernet-1-1-bootstrap
    volumes:
      - ./logs:/app/logs

  # Realm 1, Cluster 2 nodes (different cluster, same realm)
  othernet-1-2-node1:
    build: 
      context: .
      dockerfile: Dockerfile.othernet
    container_name: othernet_1_2_node1
    hostname: node1-r1c2
    environment:
      - OTHERNET_REALM=1
      - OTHERNET_CLUSTER=2
      - OTHERNET_NODE_ID=2000
      - OTHERNET_CAPABILITIES=3  # HOLDING | ROUTING
    networks:
      othernet:
        ipv4_address: 172.30.2.10
    ports:
      - "8093:8080"
    stdin_open: true
    tty: true
    command: ["./othernet_node", "172.30.1.10", "8080"]  # Connect to bootstrap
    depends_on:
      - othernet-1-1-bootstrap
    volumes:
      - ./logs:/app/logs

  # Realm 2, Cluster 1 nodes (different realm)
  othernet-2-1-node1:
    build: 
      context: .
      dockerfile: Dockerfile.othernet
    container_name: othernet_2_1_node1
    hostname: node1-r2c1
    environment:
      - OTHERNET_REALM=2
      - OTHERNET_CLUSTER=1
      - OTHERNET_NODE_ID=3000
      - OTHERNET_CAPABILITIES=7  # HOLDING | ROUTING | GATEWAY
    networks:
      othernet:
        ipv4_address: 172.30.3.10
    ports:
      - "8094:8080"
    stdin_open: true
    tty: true
    command: ["./othernet_node", "172.30.1.10", "8080"]  # Connect to bootstrap
    depends_on:
      - othernet-1-1-bootstrap
    volumes:
      - ./logs:/app/logs

  # Mobile/Edge node (limited capabilities)
  othernet-mobile:
    build: 
      context: .
      dockerfile: Dockerfile.othernet
    container_name: othernet_mobile
    hostname: mobile-node
    environment:
      - OTHERNET_REALM=1
      - OTHERNET_CLUSTER=1
      - OTHERNET_NODE_ID=9999
      - OTHERNET_CAPABILITIES=0  # No special capabilities
    networks:
      othernet:
        ipv4_address: 172.30.1.99
    ports:
      - "8095:8080"
    stdin_open: true
    tty: true
    command: ["./othernet_node", "172.30.1.11", "8080"]  # Connect to node2
    depends_on:
      - othernet-1-1-node2
    volumes:
      - ./logs:/app/logs

networks:
  othernet:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/16

volumes:
  logs:
    driver: local